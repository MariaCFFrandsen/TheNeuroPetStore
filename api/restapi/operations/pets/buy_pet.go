// Code generated by go-swagger; DO NOT EDIT.

package pets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// BuyPetHandlerFunc turns a function with the right signature into a buy pet handler
type BuyPetHandlerFunc func(BuyPetParams) middleware.Responder

// Handle executing the request and returning a response
func (fn BuyPetHandlerFunc) Handle(params BuyPetParams) middleware.Responder {
	return fn(params)
}

// BuyPetHandler interface for that can handle valid buy pet params
type BuyPetHandler interface {
	Handle(BuyPetParams) middleware.Responder
}

// NewBuyPet creates a new http.Handler for the buy pet operation
func NewBuyPet(ctx *middleware.Context, handler BuyPetHandler) *BuyPet {
	return &BuyPet{Context: ctx, Handler: handler}
}

/*
	BuyPet swagger:route PUT /buyPet/{id} pets buyPet

# Buy pet and make unavailable

It returns 200 status code when the pet has been unavailable
*/
type BuyPet struct {
	Context *middleware.Context
	Handler BuyPetHandler
}

func (o *BuyPet) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewBuyPetParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
